import streamlit as st
import requests
import base64
import io
from PIL import Image
import glob
from base64 import decodebytes
from io import BytesIO
import numpy as np
import matplotlib.pyplot as plt
from collections import Counter
import json

st.set_page_config(layout="wide", page_icon="üíª", page_title="·ª®NG D·ª§NG NH·∫¨N D·∫†NG T·∫æ B√ÅO M√ÅU")
# Set up basic information
c1, c2, c3 = st.columns(3)
c1.image("images/ICON_1.jpg")
c2.image("images/logo.png")
c3.image("images/streamlit_logo.png")
st.markdown("<h2 style='text-align: center; color: green;'; font-family:'Courier New'>·ª®NG D·ª§NG NH·∫¨N D·∫†NG T·∫æ B√ÅO M√ÅU</h2>", unsafe_allow_html=True)

# Input and parameters
st.markdown("<h3 style='text-align: left; color: green;'; font-family:'Courier New'>C√ÅC B∆Ø·ªöC PH√ÇN T√çCH H√åNH ·∫¢NH</h3>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align: left; color: green;'; font-family:'Courier New'>B∆Ø·ªöC 1: CH·ªåN ·∫¢NH C·∫¶N PH√ÇN T√çCH</h4>", unsafe_allow_html=True)

uploaded_file = st.file_uploader('', type=['png', 'jpg', 'jpeg'], accept_multiple_files=False)
st.write('[CH·ªåN ·∫¢NH KH√ÅC T·ª™ KHO D·ªÆ LI·ªÜU](https://public.roboflow.com/object-detection/bccd/)')

st.markdown("<h4 style='text-align: left; color: green;'; font-family:'Courier New'>B∆Ø·ªöC 2: HI·ªÜU CH·ªàNH C√ÅC TH√îNG S·ªê</h4>", unsafe_allow_html=True)
C1, C2 = st.columns(2)
confidence_threshold = C1.slider('Ng∆∞·ª°ng tin c·∫≠y: ch·ªçn ƒë·ªô tin c·∫≠y th·∫•p nh·∫•t ƒë·ªÉ th·ªÉ hi·ªán bi√™n c·ªßa h·ªôp nh·∫≠n d·∫°ng:', 0.0, 1.0, 0.5, 0.01)
overlap_threshold = C2.slider('Ng∆∞·ª°ng giao ·∫£nh: gi√° tr·ªã th·∫•p nh√°t cho c√°c kho·∫£ng giao nhau gi·ªØa c√°c h·ªôp nh·∫≠n d·∫°ng:', 0.0, 1.0, 0.5, 0.01)

st.markdown("<h4 style='text-align: left; color: green;'; font-family:'Courier New'>B∆Ø·ªöC 3: ƒê√ÅNH GI√Å K·∫æT QU·∫¢ V√Ä L∆ØU TR·ªÆ</h4>", unsafe_allow_html=True)
url = 'https://github.com/matthewbrems/streamlit-bccd/blob/master/BCCD_sample_images/BloodImage_00038_jpg.rf.6551ec67098bc650dd650def4e8a8e98.jpg?raw=true'
if uploaded_file: image = Image.open(uploaded_file)  
else: image = Image.open(requests.get(url, stream=True).raw)

# Convert to JPEG Buffer.
buffered = io.BytesIO()
image.save(buffered, quality=90, format='JPEG')

# Base 64 encode.
img_str = base64.b64encode(buffered.getvalue())
img_str = img_str.decode('ascii')

## Construct the URL to retrieve image.
upload_url = ''.join([
    'https://infer.roboflow.com/rf-bccd-bkpj9--1',
    '?access_token=vbIBKNgIXqAQ',
    '&format=image',
    f'&overlap={overlap_threshold * 100}',
    f'&confidence={confidence_threshold * 100}',
    '&stroke=2',
    '&labels=True'
])

## POST to the API.
r = requests.post(upload_url,
                  data=img_str,
                  headers={
    'Content-Type': 'application/x-www-form-urlencoded'
})

image = Image.open(BytesIO(r.content))

# Convert to JPEG Buffer.
buffered = io.BytesIO()
image.save(buffered, quality=90, format='JPEG')
_, C, _ = st.columns(3)
C.image(image, use_column_width=True)
## Construct the URL to retrieve JSON.
upload_url = ''.join([ 'https://infer.roboflow.com/rf-bccd-bkpj9--1', '?access_token=vbIBKNgIXqAQ'])

## POST to the API.
r = requests.post(upload_url,
                  data=img_str,
                  headers={
    'Content-Type': 'application/x-www-form-urlencoded'
})

## Save the JSON.
output_dict = r.json()

## Generate list of confidences.
confidences = [box['confidence'] for box in output_dict['predictions']]

## Summary statistics section in main app.
st.markdown("<h4 style='text-align: left; color: green;'; font-family:'Courier New'>B∆Ø·ªöC 4: K·∫æT QU·∫¢ TH·ªêNG K√ä</h4>", unsafe_allow_html=True)
C1, C2 = st.columns(2)
C1.markdown(f"<h5 style='text-align: center; color: green;'; font-family:'Courier New'> - S·ªê L∆Ø·ª¢NG T·∫æ B√ÄO TRONG ·∫¢NH: {len(confidences)} </h5>", unsafe_allow_html=True)
C2.markdown(f"<h5 style='text-align: center; color: green;'; font-family:'Courier New'> - ƒê·ªò TIN C·∫¨Y TRUNG B√åNH: {(np.round(np.mean(confidences),4))}</h5>", unsafe_allow_html=True)

# Cell count
output_string = json.dumps(output_dict)
platelets_num = output_string.count('Platelets')
wbc_num = output_string.count('WBC')
rbc_num = output_string.count('RBC')
c1, c2, c3 = st.columns(3)
c1.markdown(f"<h5 style='text-align: center; color: grey;'; font-family:'Courier New'> - S·ªê L∆Ø·ª¢NG TI·ªÇU C·∫¶U TRONG ·∫¢NH: {platelets_num} </h5>", unsafe_allow_html=True)
c2.markdown(f"<h5 style='text-align: center; color: purple;'; font-family:'Courier New'> - S·ªê L∆Ø·ª¢NG B·∫†CH C·∫¶U TRONG ·∫¢NH: {wbc_num} </h5>", unsafe_allow_html=True)
c3.markdown(f"<h5 style='text-align: center; color: red;'; font-family:'Courier New'> - S·ªê L∆Ø·ª¢NG H·ªíNG C·∫¶U TRONG ·∫¢NH: {rbc_num} </h5>", unsafe_allow_html=True)

## Histogram in main app.
_, C, _ = st.columns(3)
fig, ax = plt.subplots()
ax.hist(confidences, bins=10, range=(0.0,1.0))
C.pyplot(fig)
C.markdown("<h4 style='text-align: center; color: green;'; font-family:'Courier New'>BI·ªÇU ƒê·ªí HISTOGRAM V·ªÄ ƒê·ªò TIN C·∫¨Y</h4>", unsafe_allow_html=True)

# Footer
footer = """
<html>
<head>
<style>

footer {
text-align: center;
padding: 10px;
background-color: purple;
color: white;
}
</style>
</head>
<body>

<footer>
<p> THI·∫æT K·∫æ V√Ä L·∫¨P TR√åNH: NGHI√äN C·ª®U VI√äN VƒÇN ƒê·∫ÆC TH√ÄNH<br>
<p> PH√íNG TH√ç NGHI·ªÜM M·ªû <br>
<p> ¬© 2022 VI·ªÜN KHOA H·ªåC V√Ä C√îNG NGH·ªÜ T√çNH TO√ÅN TPHCM. All rights reserved.<br>
<a href="email: thanh.vd@icst.org.vn">thanh.vd@icst.org.vn</a></p>
</footer>

</body>
</html>
"""
st.markdown(footer, unsafe_allow_html=True)
st.markdown("<h4 style='text-align: center; color: green;'; font-family:'Courier New'></h4>", unsafe_allow_html=True)
